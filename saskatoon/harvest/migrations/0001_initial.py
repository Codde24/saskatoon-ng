# Generated by Django 3.2.3 on 2021-05-18 19:04

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djgeojson.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('member', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=50, verbose_name='Description')),
                ('shared', models.BooleanField(default='False', help_text='Can be used in harvests outside of property', verbose_name='Shared')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='member.actor', verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'equipment',
                'verbose_name_plural': 'equipment',
            },
        ),
        migrations.CreateModel(
            name='EquipmentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'equipment type',
                'verbose_name_plural': 'equipment types',
            },
        ),
        migrations.CreateModel(
            name='Harvest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('To-be-confirmed', 'To be confirmed'), ('Orphan', 'Orphan'), ('Adopted', 'Adopted'), ('Date-scheduled', 'Date scheduled'), ('Ready', 'Ready'), ('Succeeded', 'Succeeded'), ('Cancelled', 'Cancelled')], max_length=100, null=True, verbose_name='Harvest status')),
                ('owner_present', models.BooleanField(default=False, verbose_name='Owner wants to be present')),
                ('owner_help', models.BooleanField(default=False, verbose_name='Owner wants to participate')),
                ('owner_fruit', models.BooleanField(default=False, verbose_name='Owner want his share of fruits')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Start date')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End date')),
                ('publication_date', models.DateTimeField(blank=True, null=True, verbose_name='Publication date')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('nb_required_pickers', models.PositiveIntegerField(default=3, verbose_name='Number of required pickers')),
                ('about', models.TextField(blank=True, help_text='If any help is needed from volunteer pickers, please describe them here.', max_length=1000, null=True, verbose_name='Public announcement')),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='harvest_edited', to=settings.AUTH_USER_MODEL)),
                ('equipment_reserved', models.ManyToManyField(blank=True, to='harvest.Equipment', verbose_name='Reserve equipment')),
                ('pick_leader', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Pick leader')),
            ],
            options={
                'verbose_name': 'harvest',
                'verbose_name_plural': 'harvests',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='This property exists and may be able to host a pick', verbose_name='Is active')),
                ('authorized', models.NullBooleanField(default=None, help_text='Harvest in this property has been authorized for the current season by its owner', verbose_name='Authorized for this season')),
                ('pending', models.BooleanField(default=True, help_text='This property was created through a public form and needs to be validated by an administrator', verbose_name='Pending')),
                ('pending_contact_name', models.CharField(help_text='Name of the person to be contacted for confirmation', max_length=50, verbose_name='Contact name')),
                ('pending_contact_phone', models.CharField(help_text='Phone number to be used for confirmation', max_length=50, verbose_name='Contact phone number')),
                ('pending_contact_email', models.EmailField(blank=True, help_text='Email address to be used for confirmation', max_length=254, null=True, verbose_name='Contact email')),
                ('pending_newsletter', models.BooleanField(default=False, verbose_name='Newsletter subscription')),
                ('pending_recurring', models.BooleanField(default=False, verbose_name='Recurring property signup')),
                ('geom', djgeojson.fields.PointField(blank=True, null=True)),
                ('trees_location', models.CharField(blank=True, help_text='Front yard or backyard?', max_length=200, null=True, verbose_name='Trees location')),
                ('trees_accessibility', models.CharField(blank=True, help_text='Any info on how to access the tree (eg. key, gate etc)', max_length=200, null=True, verbose_name='Trees accessibility')),
                ('avg_nb_required_pickers', models.PositiveIntegerField(default=1, null=True, verbose_name='Required pickers on average')),
                ('public_access', models.BooleanField(default=False, verbose_name='Publicly accessible')),
                ('neighbor_access', models.BooleanField(default=False, verbose_name='Access to neighboring terrain if needed')),
                ('compost_bin', models.BooleanField(default=False, verbose_name='Compost bin closeby')),
                ('ladder_available', models.BooleanField(default=False, verbose_name='There is a ladder available in the property')),
                ('ladder_available_for_outside_picks', models.BooleanField(default=False, verbose_name='A ladder is available in the property and can be used for nearby picks')),
                ('harvest_every_year', models.BooleanField(default=False, verbose_name='Produces fruits every year')),
                ('number_of_trees', models.PositiveIntegerField(blank=True, null=True, verbose_name='Total number of trees/vines on this property')),
                ('approximative_maturity_date', models.DateField(blank=True, help_text='When is the tree commonly ready to be harvested?', null=True, verbose_name='Approximative maturity date')),
                ('fruits_height', models.PositiveIntegerField(blank=True, null=True, verbose_name='Height of lowest fruits')),
                ('street_number', models.CharField(blank=True, max_length=10, null=True, verbose_name='Number')),
                ('street', models.CharField(blank=True, max_length=50, null=True, verbose_name='Street')),
                ('complement', models.CharField(blank=True, max_length=150, null=True, verbose_name='Complement')),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Postal code')),
                ('publishable_location', models.CharField(blank=True, help_text='Aproximative location to be used in public communications (not the actual address)', max_length=50, null=True, verbose_name='Publishable location')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('additional_info', models.CharField(blank=True, help_text='Any additional information that we should be aware of', max_length=1000, null=True, verbose_name='Additional information')),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('city', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='member.city', verbose_name='City')),
                ('country', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='member.country', verbose_name='Country')),
                ('neighborhood', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='member.neighborhood', verbose_name='Neighborhood')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='member.actor', verbose_name='Owner')),
                ('state', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='member.state', verbose_name='Province')),
            ],
            options={
                'verbose_name': 'property',
                'verbose_name_plural': 'properties',
            },
        ),
        migrations.CreateModel(
            name='TreeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=20, verbose_name='Name')),
                ('image', models.ImageField(null=True, upload_to='fruits_images', verbose_name='Fruit image')),
                ('fruit_name', models.CharField(max_length=20, verbose_name='Fruit name')),
                ('season_start', models.DateField(blank=True, null=True, verbose_name='Season start date')),
            ],
            options={
                'verbose_name': 'tree type',
                'verbose_name_plural': 'tree types',
            },
        ),
        migrations.CreateModel(
            name='RequestForParticipation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_people', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)], verbose_name='How many people are you?')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('notes_from_pickleader', models.TextField(blank=True, null=True, verbose_name='Notes from the pick leader.')),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created on')),
                ('acceptation_date', models.DateTimeField(blank=True, null=True, verbose_name='Accepted on')),
                ('is_accepted', models.NullBooleanField(default=None, verbose_name='Accepted')),
                ('showed_up', models.NullBooleanField(default=None, verbose_name='Showed up')),
                ('is_cancelled', models.BooleanField(default=False, verbose_name='Canceled')),
                ('harvest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request_for_participation', to='harvest.harvest', verbose_name='Harvest')),
                ('picker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='member.person', verbose_name='Requester')),
            ],
            options={
                'verbose_name': 'request for participation',
                'verbose_name_plural': 'requests for participation',
            },
        ),
        migrations.CreateModel(
            name='PropertyImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='properties_images')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='harvest.property')),
            ],
        ),
        migrations.AddField(
            model_name='property',
            name='trees',
            field=models.ManyToManyField(help_text='Select multiple fruit types if applicable. Unknown fruit type or colour can be mentioned in the additional comments at the bottom.', to='harvest.TreeType', verbose_name='Fruit tree/vine type(s)'),
        ),
        migrations.CreateModel(
            name='HarvestYield',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_in_lb', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Weight (lb)')),
                ('harvest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='harvest.harvest', verbose_name='Harvest')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='member.actor', verbose_name='Recipient')),
                ('tree', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='harvest.treetype', verbose_name='Tree')),
            ],
            options={
                'verbose_name': 'harvest yield',
                'verbose_name_plural': 'harvest yields',
            },
        ),
        migrations.CreateModel(
            name='HarvestImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='harvests_images')),
                ('harvest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='harvest.harvest')),
            ],
        ),
        migrations.AddField(
            model_name='harvest',
            name='property',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='harvest.property', verbose_name='Property'),
        ),
        migrations.AddField(
            model_name='harvest',
            name='trees',
            field=models.ManyToManyField(to='harvest.TreeType', verbose_name='Fruit trees'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='property',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='equipment', to='harvest.property', verbose_name='Property'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='harvest.equipmenttype', verbose_name='Type'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=500, verbose_name='Content')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Comment', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('harvest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment', to='harvest.harvest', verbose_name='harvest')),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comments',
            },
        ),
    ]
